gap
(GAP_KEY <- gs_gap_key())
third_party_gap <- GAP_KEY %>%
gs_key()
(GAP_KEY <- gs_gap_key())
third_party_gap <- GAP_KEY %>%
gs_key()
GAP_KEY
gs_ls("HOUSE CHORES")
(my_sheets <- gs_ls())
gs_ls("House Chores")
gap <- gs_title("House Chores")
gap <- gs_title("House Chores")
gs_ls("House Chores")
gap <- gs_title("House Chores")
(my_sheets <- gs_ls())
library(googlesheets)
library(dplyr)
library(googlesheets)
suppressMessages(library(dplyr))
(my_sheets <- gs_ls())
my_sheets %>% glimpse()
gap <- gs_title("House Chores")
gs_ls("House Chores")
gap <- gs_title("House Chores")
gap <- gs_title("COPY_EXAMPLE")
gs_title("House Chores")
gs_ls("House Chores")
gap <- gs_title("House Chores ")
gap <- gs_title("House Chores")
gap
gs_ws_ls(gap)
gs_read("House Chores")
gs_read("House Chores")
gs_read(ss, "House Chores")
gs_read(ws = "House Chores")
gs_ws_ls(gap)
gs_read(ws = "Form Responses 1")
gap %>%
gs_read(ws = "Form Responses 1")
gap %>%
gs_read(ws = 1)
gap %>%
gs_read(ws = 1)
gap %>%
gs_read(ws = "Form Responses 1")
gs_ws_ls(gap)
gap %>%
gs_read(ws = "Form Responses 1")
gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'Y', trim = TRUE)
gs_read(ws = "Form Responses 1")
gap %>% gs_read(ws = "Form Responses 1")
f = gap %>% gs_read(ws = "Form Responses 1")
f
f = gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'Y', trim = TRUE)
gap
f
f = gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'Y', trim = False)
f = gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'Y'
)
for (i in 2:6) {
foo <- foo %>% gs_add_row(ws = "Form Responses 1", input = 'iris[i, ]'Y)
Sys.sleep(0.3)
}
for (i in 2:6) {
foo <- foo %>% gs_add_row(ws = "Form Responses 1", input = 'Y')
Sys.sleep(0.3)
}
for (i in 2:6) {
foo <- gap %>% gs_add_row(ws = "Form Responses 1", input = 'Y')
Sys.sleep(0.3)
}
for (i in 2:6) {
foo <- gap %>% gs_add_row(ws = "Form Responses 1", input = 'Y')
Sys.sleep(0.3)
}
for (i in 2:6) {
foo <- gap %>% gs_add_row(ws = "Form Responses 1", input = 'N')
Sys.sleep(0.3)
}
for (i in 3:6) {
foo <- gap %>% gs_add_row(ws = "Form Responses 1", input = 'N')
Sys.sleep(0.3)
}
for (i in 3:6) {
foo <- gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'N')
Sys.sleep(0.3)
}
gs_edit_cells(ss, ws = "Form Responses 1", input = "", anchor = "A1", byrow = FALSE,
col_names = NULL, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "", anchor = "A1", byrow = FALSE,
col_names = NULL, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "", anchor = "D1", byrow = FALSE,
col_names = NULL, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "Y", anchor = "D1", byrow = FALSE,
col_names = 'PAID', trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "", anchor = "D1", byrow = FALSE,
col_names = 'PAID', trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "", anchor = "D1", byrow = FALSE,
trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "kjhkh", anchor = "D1", byrow = FALSE,
trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "kjhkh", anchor = "D1", byrow = TRUE,
trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "klkhjkjhjhkh", anchor = "D1", byrow = TRUE,
trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "klkhjkjhjhkh", anchor = "D1", byrow = TRUE,
col_names = FALSE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "PAID", anchor = "D1", byrow = TRUE,
col_names = FALSE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "PAsdasdID", anchor = "D1", byrow = TRUE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = ["PAsdasdID", 'ppo'], anchor = "D1", byrow = TRUE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = ["PAsdasdID" 'ppo'], anchor = "D1", byrow = TRUE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = ("PAsdasdID" "ppo"), anchor = "D1", byrow = TRUE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = ("PAsdasdID" ,"ppo"), anchor = "D1", byrow = TRUE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = LETTER[1:4], anchor = "D1", byrow = TRUE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
f = gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'Y')
gs_edit_cells(gap, ws = "Form Responses 1", input = LETTERS[1:4], anchor = "D1", byrow = TRUE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = LETTERS[1:4], anchor = "D1", byrow = FALSE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
LETTERS[1:4]
gs_edit_cells(gap, ws = "Form Responses 1", input = "Y", "N", anchor = "D1", byrow = FALSE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "Y" "N", anchor = "D1", byrow = FALSE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "Y", anchor = "D1", byrow = FALSE,
col_names = TRUE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "Y", anchor = "D1", byrow = FALSE,
col_names = FALSE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "SAdasd", anchor = "D1", byrow = FALSE,
col_names = FALSE, trim = FALSE, verbose = TRUE)
gs_edit_cells(gap, ws = "Form Responses 1", input = "SAdasd", anchor = "D2", byrow = FALSE,
col_names = FALSE, trim = FALSE, verbose = TRUE)
f
gap
f = gap %>% gs_read(ws = "Form Responses 1")
f
f = gap %>% gs_read(ws = "Form Responses 1")
f = gap %>% gs_read(ws = "Form Responses 1")
f
f.PAID
f
type(f)
f.type
View(f)
View(election)
View(electoral.college)
View(f)
View(failed)
View(foo)
View(gap)
View(gene)
View(gap)
library(googlesheets)
suppressMessages(library(dplyr))
library(googlesheets)
suppressMessages(library(dplyr))
my_sheets %>% glimpse()
gs_gap() %>%
gs_copy(to = "House Chores")
gs_ls("House Chores")
gs_title("House Chores")
gs_title("House Chores")
gs_read(ws = "Form Responses 1")
gs_read(gs_title("House Chores"), ws = "Form Responses 1")
gap <- gs_title("House Chores")
f = gap %>% gs_read(ws = "Form Responses 1")
f
f
f %>%
select_if(function(x) any(is.na(x))) %>%
summarise_each(funs(sum(is.na(.)))) -> f_NA
f %>%
select_if(function(x) any(is.na(x))) %>%
summarise_all(funs(sum(is.na(.)))) -> f_NA
f_NA
select_if(function(f) any(is.na(f)))
library(shiny); runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_APP/soccer.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_ex.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_APP/soccer.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_APP/soccer.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_APP/soccer.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
install.packages("shinyFiles")
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_ex.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_ex.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
shinyFilesExample()
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
v = 3
rm(v)
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp(list(
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris')),
selectInput('columns', 'Columns', "")
),
server = function(input, output, session){
outVar = reactive({
mydata = get(input$dataset)
names(mydata)
})
observe({
updateSelectInput(session, "columns",
choices = outVar()
)})
}
))
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
library(shiny); runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_APP/soccer.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_EX_APP/soccer_pickfile.R')
library(googlesheets)
suppressMessages(library(dplyr))
(my_sheets <- gs_ls())
my_sheets %>% glimpse()
gs_gap() %>%
gs_copy(to = "House Chores")
gs_ls("House Chores")
gap <- gs_title("House Chores")
f = gap %>% gs_read(ws = "Form Responses 1")
f %>%
select_if(function(x) any(is.na(x))) %>%
summarise_all(funs(sum(is.na(.)))) -> f_NA
select_if(function(f) any(is.na(f)))
arfard(GAP_KEY <- gs_gap_key())
third_party_gap <- GAP_KEY %>%
gs_key()
c
gs_ws_ls(gap)
f = gap %>% gs_read(ws = "Form Responses 1")
f.type
f = gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'Y')
gs_edit_cells(gap, ws = "Form Responses 1", input = "SAdasd", anchor = "D2", byrow = FALSE,
col_names = FALSE, trim = FALSE, verbose = TRUE)
gap
for (i in 3:6) {
foo <- gap %>% gs_edit_cells(ws = "Form Responses 1", input = 'N')
Sys.sleep(0.3)
}
library(googlesheets)
library(googlesheets)
suppressMessages(library(dplyr))
(my_sheets <- gs_ls())
my_sheets
gs_ls("NEW House Chores")
gap <- gs_title("NEW House Chores")
gap
data = gap %>% gs_read(ws = "Form Responses 1")
data = gap %>% gs_read(ws = "Form Responses 1")
data
data%>%group_by('Name')
data%>%group_by('Name')%>%summarise(t_points = sum(Points))
data
data%>%group_by('Name')%>%summarise(t_points = sum(Points))
data%>%group_by(Name)%>%summarise(t_points = sum(Points))
data$TimestampDate,"%m/%d/%Y"
as.Date(data$TimestampDate,"%m/%d/%Y")
as.Date(data$Timestamp,"%m/%d/%Y")
data$Day = as.Date(data$Timestamp,"%m/%d/%Y")
data
my_sheets
my_sheets
my_sheets %>% glimpse()
# Check the list of sheets
my_sheets <- gs_ls()
my_sheets
# Listing the table of interest:
gs_ls("NEW House Chores")
gap <- gs_title("NEW House Chores")
gap
data%>%group_by(Name)%>%summarise(t_points = sum(Points))
library(googlesheets)
suppressMessages(library(dplyr))
# Check the list of sheets
my_sheets <- gs_ls()
# Listing the table of interest:
gs_ls("NEW House Chores")
# Getting the data from the sheet
# reading the file
gap <- gs_title("NEW House Chores")
# Getting the data from the responses
data = gap %>% gs_read(ws = "Form Responses 1")
# generating a date field.
data$Day = as.Date(data$Timestamp,"%m/%d/%Y")
# Adding the total number of point for each child.
data%>%group_by(Name)%>%summarise(t_points = sum(Points))
data
my_sheets <- gs_ls()
# Listing the table of interest:
gs_ls("NEW House Chores")
# Getting the data from the sheet
# reading the file
gap <- gs_title("NEW House Chores")
# Getting the data from the responses
data = gap %>% gs_read(ws = "Form Responses 1")
# generating a date field.
data$Day = as.Date(data$Timestamp,"%m/%d/%Y")
# Adding the total number of point for each child.
data%>%group_by(Name)%>%summarise(t_points = sum(Points))
data
my_sheets <- gs_ls()
# Listing the table of interest:
gs_ls("NEW House Chores")
# Getting the data from the sheet
# reading the file
gap <- gs_title("NEW House Chores")
# Getting the data from the responses
data = gap %>% gs_read(ws = "Form Responses 1")
# generating a date field.
data$Day = as.Date(data$Timestamp,"%m/%d/%Y")
# Adding the total number of point for each child.
data%>%group_by(Name)%>%summarise(t_points = sum(Points))
data
gs_ws_ls(gap)
# Checking the sheets in the spreadsheet
gs_ws_ls(gap)
f = gap %>% gs_read(ws = "Form Responses 1")
f.type
data
library(shiny); runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_APP/soccer.R')
runApp('~/Google Drive/01_GitHub/chores_calculations/chores_app1.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
## App 1: Sample usage
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/GPS_COOR/SOCCER_APP/soccer.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
shinyUI(
fluidPage(
theme = shinytheme("cosmo"),
titlePanel("Read and write a private Google Sheet"),
sidebarLayout(
sidebarPanel(
h6(paste("This app is hard-wired to target a private Google Sheet.")),
h6(paste("You can't visit the Sheet in the browser, because it's",
"private. Which is the whole point of this example.")),
h6("Fail to browse the Sheet: ",
a("HERE", href = ss$browser_url, target="_blank")),
h6(a("Click Here to See Code on Github",
href="https://github.com/jennybc/googlesheets/tree/master/inst/shiny-examples/10_read-write-private-sheet",
target="_blank")),
sliderInput("row", "Row", min = 1, max = n, value = 1, step = 1,
ticks = FALSE),
selectInput("column", "Column",
choices = stats::setNames(seq_len(n), colnames(filler))),
selectInput("contents", "Cell contents",
choices = c("apple", "grape", "banana")),
actionButton("submit", "Submit", class = "btn-primary"),
actionButton("reset", "Reset", class = "btn-primary")
),
mainPanel(
tableOutput("table")
)
)
))
shinyUI(
fluidPage(
titlePanel("Read and write a private Google Sheet"),
sidebarLayout(
sidebarPanel(
h6(paste("This app is hard-wired to target a private Google Sheet.")),
h6(paste("You can't visit the Sheet in the browser, because it's",
"private. Which is the whole point of this example.")),
h6("Fail to browse the Sheet: ",
a("HERE", href = ss$browser_url, target="_blank")),
h6(a("Click Here to See Code on Github",
href="https://github.com/jennybc/googlesheets/tree/master/inst/shiny-examples/10_read-write-private-sheet",
target="_blank")),
sliderInput("row", "Row", min = 1, max = n, value = 1, step = 1,
ticks = FALSE),
selectInput("column", "Column",
choices = stats::setNames(seq_len(n), colnames(filler))),
selectInput("contents", "Cell contents",
choices = c("apple", "grape", "banana")),
actionButton("submit", "Submit", class = "btn-primary"),
actionButton("reset", "Reset", class = "btn-primary")
),
mainPanel(
tableOutput("table")
)
)
))
shinyServer(function(input, output, session) {
observeEvent(
input$reset,
gs_edit_cells(ss, input = filler)
)
observeEvent(
input$submit,
gs_edit_cells(ss, input = input$contents,
## the +1 business is to avoid writing into the header row
anchor = cell_limits(c(input$row + 1, input$column),
c(input$row + 1, input$column)))
)
the_data <- eventReactive({input$submit | input$reset},
gs_read(ss), ignoreNULL = FALSE)
output$table <- renderTable(the_data())
})
server <- shinyServer(function(input, output, session) {
observeEvent(
input$reset,
gs_edit_cells(ss, input = filler)
)
observeEvent(
input$submit,
gs_edit_cells(ss, input = input$contents,
## the +1 business is to avoid writing into the header row
anchor = cell_limits(c(input$row + 1, input$column),
c(input$row + 1, input$column)))
)
the_data <- eventReactive({input$submit | input$reset},
gs_read(ss), ignoreNULL = FALSE)
output$table <- renderTable(the_data())
})
server <- function(input, output, session) {
observeEvent(
input$reset,
gs_edit_cells(ss, input = filler)
)
observeEvent(
input$submit,
gs_edit_cells(ss, input = input$contents,
## the +1 business is to avoid writing into the header row
anchor = cell_limits(c(input$row + 1, input$column),
c(input$row + 1, input$column)))
)
the_data <- eventReactive({input$submit | input$reset},
gs_read(ss), ignoreNULL = FALSE)
output$table <- renderTable(the_data())
}
runApp('Google Drive/01_GitHub/chores_calculations/testERASE2.R')
runApp('Google Drive/01_GitHub/chores_calculations/testERASE2.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app1.R')
runApp('Google Drive/01_GitHub/chores_calculations/chores_app.R')
